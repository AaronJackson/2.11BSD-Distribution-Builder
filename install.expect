#!/usr/bin/expect
spawn pdp11

set dprompt {d\(isplay\).*\? }

# Start up the PDP-11
expect "sim>" {send "set cpu 11/73 4M\n"}
expect "sim>" {send "set rq enabled\n"}
expect "sim>" {send "set rq0 rd54\n"}
expect "sim>" {send "att rq0 newdisk2.img\n"}
expect "sim>" {send "set tq enabled\n"}
expect "sim>" {send "att tq0 211bsd.tap\n"}
expect "sim>" {send "boot tq0\n"}

# Load disklabel from tape
expect ": " {send "tms(0,1)\n"}

# Prepare our RD54 disk
expect "Disk?" {send "ra(0,0)\n"}
expect "Proceed?" {send "y"}
expect -re $dprompt {send "d"} #display disk label
expect -re $dprompt {send "m"} #modify
expect "modify"
expect -re $dprompt {send "m"} #misc
expect "modify misc"
expect -re $dprompt {send "l"} #label
expect -ex "label \[DEFAULT\]: " {send "211BSD\r"}
expect "modify misc"
expect -re $dprompt {send "q"} #quit to upper menu

# Create the root 2.11BSD partition
expect -re $dprompt {send "p"} #partition menu
expect -re $dprompt {send "s"} #modify partition selection
expect "a b c d e" {send "a"} #choose primary partition
expect "modify partition 'a'"
expect -re $dprompt {send "s"} #enter size
expect "'a' size"  {send "1150c\n"} #1150 cyl, leaving 70 for swap
expect "modify partition 'a'"
expect -re $dprompt {send "d"} #display partition label so far
expect -re $dprompt {send "q"} #quit to upper menu
expect "modify partitions"

# Create the swap partition
expect -re $dprompt {send "s"} #modify partition selection
expect "a b c d e" {send "b"} #choose secondary partition
expect "modify partition 'b'"
expect -re $dprompt {send "s"} #enter size
expect "'b' size" {send "70c\n"} #use remaining disk
expect "modify partition 'b'"
expect -re $dprompt {send "o"} #set offset
expect "'b' offset" {send "1150c\n"}
expect "modify partition 'b'"
expect -re $dprompt {send "t"} #set partition type
expect "'b' fstype" {send "swap\n"} #set to swap
expect "modify partition 'b'"

# Exit and save
expect -re $dprompt {send "q"} #quit to upper menu
expect "modify partitions"
expect -re $dprompt {send "q"} #quit to upper menu
expect "modify"
expect -re $dprompt {send "q"} #quit to upper menu
expect -re $dprompt {send "d"} #show the partitions before we write
expect {\n}
expect -re $dprompt {send "w"} #write disk label
expect -re $dprompt {send "q"} #quit to boot loader

# Load mkfs from tape and initialise file system
expect ": " {send "tms(0,2)\n"}
expect "file system: " {send "ra(0,0)\n"}
expect "file sys size " {send "\n"}
expect "bytes per inode " {send "\n"}
expect -ex "interleaving factor (m; 2 default): " {send "\n"}
expect -ex "interleaving modulus (n; 127 default): " {send "\n"}

# Load restor to write root.dump
expect ": " {send "tms(0,3)\n"}
expect "Tape? " {send "tms(0,5)\n"}
expect "Disk? " {send "ra(0,0)\n"}
expect "Last chance before scribbling on disk. " { send "\n" }

# Let's boot into unix and write the boot block to disk
expect ": " {send "ra(0,0)unix\n"}
expect -ex {erase, kill ^U, intr ^C}
expect "# " {send "dd if=/mdec/rauboot of=/dev/rra0a count=1\n"}
expect "# " {send "halt\n"}
expect "halting"

# Test that the boot block installed correctly
expect "sim> " {send "\n"}
expect "sim> " {send "boot rq0\n"}
expect ": " {send "ra(0,0)unix\n"}

# Extract /usr
expect -ex {erase, kill ^U, intr ^C}
expect "# " {send "cd /dev\n"}
expect "# " {send "./MAKEDEV tu0\n"}
expect "# " {send "mkdir /usr\n"}
expect "# " {send "cd /usr\n"}
expect "# " {send "mt rew\n"}
expect "# " {send "mt fsf 6\n"}
expect "# " {send "tar xpbf 20 /dev/rmt12\n"}

# Extract /usr/src/{sys,include}
expect "# " {send "mkdir /usr/src\n"}
expect "# " {send "cd /usr/src\n"}
expect "# " {send "mt -f /dev/rmt12 fsf\n"}
expect "# " {send "tar xpbf 20 /dev/rmt12\n"}

# Correct permissions
expect "# " {send "cd /\n"}
expect "# " {send "chmod 755 / /usr /usr/src /usr/src/sys\n"}
expect "# " {send "rm -f sys\n"}
expect "# " {send "ln -s usr/src/sys sys\n"}

# Extract /usr/src
expect "# " {send "mt -f /dev/rmt12 fsf\n"}
expect "# " {send "cd /usr/src\n"}
expect "# " {send "tar xpbf 20 /dev/rmt12\n"}

# Perform some tests
set timeout 500

expect "# " {send "cd /usr/src/sys/GENERIC\n"}
expect "# " {send "make clean\n"}
expect "# " {send "make\n"}

# Verify it's working
expect "# " {send "echo $?\n"}
expect -re "(\\d+)" {
    set result $expect_out(1,string)
}
expect "# "

exit $result
